/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologiccsiem

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetSignalEnrichmentsResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSignalEnrichmentsResponseData{}

// GetSignalEnrichmentsResponseData The details for a single Signal
type GetSignalEnrichmentsResponseData struct {
	Enrichments []Enrichment `json:"enrichments"`
}

type _GetSignalEnrichmentsResponseData GetSignalEnrichmentsResponseData

// NewGetSignalEnrichmentsResponseData instantiates a new GetSignalEnrichmentsResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSignalEnrichmentsResponseData(enrichments []Enrichment) *GetSignalEnrichmentsResponseData {
	this := GetSignalEnrichmentsResponseData{}
	this.Enrichments = enrichments
	return &this
}

// NewGetSignalEnrichmentsResponseDataWithDefaults instantiates a new GetSignalEnrichmentsResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSignalEnrichmentsResponseDataWithDefaults() *GetSignalEnrichmentsResponseData {
	this := GetSignalEnrichmentsResponseData{}
	return &this
}

// GetEnrichments returns the Enrichments field value
func (o *GetSignalEnrichmentsResponseData) GetEnrichments() []Enrichment {
	if o == nil {
		var ret []Enrichment
		return ret
	}

	return o.Enrichments
}

// GetEnrichmentsOk returns a tuple with the Enrichments field value
// and a boolean to check if the value has been set.
func (o *GetSignalEnrichmentsResponseData) GetEnrichmentsOk() ([]Enrichment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enrichments, true
}

// SetEnrichments sets field value
func (o *GetSignalEnrichmentsResponseData) SetEnrichments(v []Enrichment) {
	o.Enrichments = v
}

func (o GetSignalEnrichmentsResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSignalEnrichmentsResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enrichments"] = o.Enrichments
	return toSerialize, nil
}

func (o *GetSignalEnrichmentsResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enrichments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetSignalEnrichmentsResponseData := _GetSignalEnrichmentsResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetSignalEnrichmentsResponseData)

	if err != nil {
		return err
	}

	*o = GetSignalEnrichmentsResponseData(varGetSignalEnrichmentsResponseData)

	return err
}

type NullableGetSignalEnrichmentsResponseData struct {
	value *GetSignalEnrichmentsResponseData
	isSet bool
}

func (v NullableGetSignalEnrichmentsResponseData) Get() *GetSignalEnrichmentsResponseData {
	return v.value
}

func (v *NullableGetSignalEnrichmentsResponseData) Set(val *GetSignalEnrichmentsResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSignalEnrichmentsResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSignalEnrichmentsResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSignalEnrichmentsResponseData(val *GetSignalEnrichmentsResponseData) *NullableGetSignalEnrichmentsResponseData {
	return &NullableGetSignalEnrichmentsResponseData{value: val, isSet: true}
}

func (v NullableGetSignalEnrichmentsResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSignalEnrichmentsResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


