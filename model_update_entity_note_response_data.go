/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UpdateEntityNoteResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEntityNoteResponseData{}

// UpdateEntityNoteResponseData The updated EntityNote
type UpdateEntityNoteResponseData struct {
	Id string `json:"id"`
	Timestamp time.Time `json:"timestamp"`
	LastUpdated time.Time `json:"lastUpdated"`
	Note string `json:"note"`
	Author *GetEntityNotesResponseDataInnerAuthor `json:"author,omitempty"`
}

type _UpdateEntityNoteResponseData UpdateEntityNoteResponseData

// NewUpdateEntityNoteResponseData instantiates a new UpdateEntityNoteResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEntityNoteResponseData(id string, timestamp time.Time, lastUpdated time.Time, note string) *UpdateEntityNoteResponseData {
	this := UpdateEntityNoteResponseData{}
	this.Id = id
	this.Timestamp = timestamp
	this.LastUpdated = lastUpdated
	this.Note = note
	return &this
}

// NewUpdateEntityNoteResponseDataWithDefaults instantiates a new UpdateEntityNoteResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEntityNoteResponseDataWithDefaults() *UpdateEntityNoteResponseData {
	this := UpdateEntityNoteResponseData{}
	return &this
}

// GetId returns the Id field value
func (o *UpdateEntityNoteResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateEntityNoteResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateEntityNoteResponseData) SetId(v string) {
	o.Id = v
}

// GetTimestamp returns the Timestamp field value
func (o *UpdateEntityNoteResponseData) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *UpdateEntityNoteResponseData) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *UpdateEntityNoteResponseData) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetLastUpdated returns the LastUpdated field value
func (o *UpdateEntityNoteResponseData) GetLastUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *UpdateEntityNoteResponseData) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *UpdateEntityNoteResponseData) SetLastUpdated(v time.Time) {
	o.LastUpdated = v
}

// GetNote returns the Note field value
func (o *UpdateEntityNoteResponseData) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *UpdateEntityNoteResponseData) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *UpdateEntityNoteResponseData) SetNote(v string) {
	o.Note = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *UpdateEntityNoteResponseData) GetAuthor() GetEntityNotesResponseDataInnerAuthor {
	if o == nil || IsNil(o.Author) {
		var ret GetEntityNotesResponseDataInnerAuthor
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEntityNoteResponseData) GetAuthorOk() (*GetEntityNotesResponseDataInnerAuthor, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *UpdateEntityNoteResponseData) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given GetEntityNotesResponseDataInnerAuthor and assigns it to the Author field.
func (o *UpdateEntityNoteResponseData) SetAuthor(v GetEntityNotesResponseDataInnerAuthor) {
	o.Author = &v
}

func (o UpdateEntityNoteResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEntityNoteResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["lastUpdated"] = o.LastUpdated
	toSerialize["note"] = o.Note
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	return toSerialize, nil
}

func (o *UpdateEntityNoteResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"timestamp",
		"lastUpdated",
		"note",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateEntityNoteResponseData := _UpdateEntityNoteResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateEntityNoteResponseData)

	if err != nil {
		return err
	}

	*o = UpdateEntityNoteResponseData(varUpdateEntityNoteResponseData)

	return err
}

type NullableUpdateEntityNoteResponseData struct {
	value *UpdateEntityNoteResponseData
	isSet bool
}

func (v NullableUpdateEntityNoteResponseData) Get() *UpdateEntityNoteResponseData {
	return v.value
}

func (v *NullableUpdateEntityNoteResponseData) Set(val *UpdateEntityNoteResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEntityNoteResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEntityNoteResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEntityNoteResponseData(val *UpdateEntityNoteResponseData) *NullableUpdateEntityNoteResponseData {
	return &NullableUpdateEntityNoteResponseData{value: val, isSet: true}
}

func (v NullableUpdateEntityNoteResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEntityNoteResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


