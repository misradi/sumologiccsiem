/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Automation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Automation{}

// Automation struct for Automation
type Automation struct {
	Id string `json:"id"`
	PlaybookId string `json:"playbookId"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	CseResourceType string `json:"cseResourceType"`
	CseResourceSubTypes []string `json:"cseResourceSubTypes,omitempty"`
	ExecutionTypes []string `json:"executionTypes"`
	Enabled bool `json:"enabled"`
}

type _Automation Automation

// NewAutomation instantiates a new Automation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutomation(id string, playbookId string, name string, cseResourceType string, executionTypes []string, enabled bool) *Automation {
	this := Automation{}
	this.Id = id
	this.PlaybookId = playbookId
	this.Name = name
	this.CseResourceType = cseResourceType
	this.ExecutionTypes = executionTypes
	this.Enabled = enabled
	return &this
}

// NewAutomationWithDefaults instantiates a new Automation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutomationWithDefaults() *Automation {
	this := Automation{}
	return &this
}

// GetId returns the Id field value
func (o *Automation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Automation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Automation) SetId(v string) {
	o.Id = v
}

// GetPlaybookId returns the PlaybookId field value
func (o *Automation) GetPlaybookId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlaybookId
}

// GetPlaybookIdOk returns a tuple with the PlaybookId field value
// and a boolean to check if the value has been set.
func (o *Automation) GetPlaybookIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlaybookId, true
}

// SetPlaybookId sets field value
func (o *Automation) SetPlaybookId(v string) {
	o.PlaybookId = v
}

// GetName returns the Name field value
func (o *Automation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Automation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Automation) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Automation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Automation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Automation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Automation) SetDescription(v string) {
	o.Description = &v
}

// GetCseResourceType returns the CseResourceType field value
func (o *Automation) GetCseResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CseResourceType
}

// GetCseResourceTypeOk returns a tuple with the CseResourceType field value
// and a boolean to check if the value has been set.
func (o *Automation) GetCseResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CseResourceType, true
}

// SetCseResourceType sets field value
func (o *Automation) SetCseResourceType(v string) {
	o.CseResourceType = v
}

// GetCseResourceSubTypes returns the CseResourceSubTypes field value if set, zero value otherwise.
func (o *Automation) GetCseResourceSubTypes() []string {
	if o == nil || IsNil(o.CseResourceSubTypes) {
		var ret []string
		return ret
	}
	return o.CseResourceSubTypes
}

// GetCseResourceSubTypesOk returns a tuple with the CseResourceSubTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Automation) GetCseResourceSubTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.CseResourceSubTypes) {
		return nil, false
	}
	return o.CseResourceSubTypes, true
}

// HasCseResourceSubTypes returns a boolean if a field has been set.
func (o *Automation) HasCseResourceSubTypes() bool {
	if o != nil && !IsNil(o.CseResourceSubTypes) {
		return true
	}

	return false
}

// SetCseResourceSubTypes gets a reference to the given []string and assigns it to the CseResourceSubTypes field.
func (o *Automation) SetCseResourceSubTypes(v []string) {
	o.CseResourceSubTypes = v
}

// GetExecutionTypes returns the ExecutionTypes field value
func (o *Automation) GetExecutionTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExecutionTypes
}

// GetExecutionTypesOk returns a tuple with the ExecutionTypes field value
// and a boolean to check if the value has been set.
func (o *Automation) GetExecutionTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionTypes, true
}

// SetExecutionTypes sets field value
func (o *Automation) SetExecutionTypes(v []string) {
	o.ExecutionTypes = v
}

// GetEnabled returns the Enabled field value
func (o *Automation) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Automation) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Automation) SetEnabled(v bool) {
	o.Enabled = v
}

func (o Automation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Automation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["playbookId"] = o.PlaybookId
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["cseResourceType"] = o.CseResourceType
	if !IsNil(o.CseResourceSubTypes) {
		toSerialize["cseResourceSubTypes"] = o.CseResourceSubTypes
	}
	toSerialize["executionTypes"] = o.ExecutionTypes
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *Automation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"playbookId",
		"name",
		"cseResourceType",
		"executionTypes",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAutomation := _Automation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAutomation)

	if err != nil {
		return err
	}

	*o = Automation(varAutomation)

	return err
}

type NullableAutomation struct {
	value *Automation
	isSet bool
}

func (v NullableAutomation) Get() *Automation {
	return v.value
}

func (v *NullableAutomation) Set(val *Automation) {
	v.value = val
	v.isSet = true
}

func (v NullableAutomation) IsSet() bool {
	return v.isSet
}

func (v *NullableAutomation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutomation(val *Automation) *NullableAutomation {
	return &NullableAutomation{value: val, isSet: true}
}

func (v NullableAutomation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutomation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


