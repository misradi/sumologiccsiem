/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomEntityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomEntityType{}

// CustomEntityType struct for CustomEntityType
type CustomEntityType struct {
	Id string `json:"id"`
	// Machine friendly and unique identifier. Examples: \"ip\", \"username\", \"mac\".
	Identifier string `json:"identifier"`
	// Human friend and unique name. Examples: \"Ip Address\", \"Username\", \"Mac Address\".
	Name string `json:"name"`
	// Record schema fields. Examples: \"file_hash_md5\", \"file_hash_sha1\".
	Fields []string `json:"fields"`
}

type _CustomEntityType CustomEntityType

// NewCustomEntityType instantiates a new CustomEntityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomEntityType(id string, identifier string, name string, fields []string) *CustomEntityType {
	this := CustomEntityType{}
	this.Id = id
	this.Identifier = identifier
	this.Name = name
	this.Fields = fields
	return &this
}

// NewCustomEntityTypeWithDefaults instantiates a new CustomEntityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomEntityTypeWithDefaults() *CustomEntityType {
	this := CustomEntityType{}
	return &this
}

// GetId returns the Id field value
func (o *CustomEntityType) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomEntityType) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomEntityType) SetId(v string) {
	o.Id = v
}

// GetIdentifier returns the Identifier field value
func (o *CustomEntityType) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *CustomEntityType) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *CustomEntityType) SetIdentifier(v string) {
	o.Identifier = v
}

// GetName returns the Name field value
func (o *CustomEntityType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomEntityType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomEntityType) SetName(v string) {
	o.Name = v
}

// GetFields returns the Fields field value
func (o *CustomEntityType) GetFields() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *CustomEntityType) GetFieldsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *CustomEntityType) SetFields(v []string) {
	o.Fields = v
}

func (o CustomEntityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomEntityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["identifier"] = o.Identifier
	toSerialize["name"] = o.Name
	toSerialize["fields"] = o.Fields
	return toSerialize, nil
}

func (o *CustomEntityType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"identifier",
		"name",
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomEntityType := _CustomEntityType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomEntityType)

	if err != nil {
		return err
	}

	*o = CustomEntityType(varCustomEntityType)

	return err
}

type NullableCustomEntityType struct {
	value *CustomEntityType
	isSet bool
}

func (v NullableCustomEntityType) Get() *CustomEntityType {
	return v.value
}

func (v *NullableCustomEntityType) Set(val *CustomEntityType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomEntityType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomEntityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomEntityType(val *CustomEntityType) *NullableCustomEntityType {
	return &NullableCustomEntityType{value: val, isSet: true}
}

func (v NullableCustomEntityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomEntityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


