/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Signal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Signal{}

// Signal struct for Signal
type Signal struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Summary string `json:"summary"`
	Stage string `json:"stage"`
	// When this signal was generated from a rule.
	Created time.Time `json:"created"`
	// Timestamp of first log record for this signal.
	Timestamp time.Time `json:"timestamp"`
	Severity int32 `json:"severity"`
	// The total number of Records (including the sum of primaryRecordsJson and extraRecordsJson
	RecordCount int32 `json:"recordCount"`
	RecordTypes []string `json:"recordTypes"`
	ContentType *string `json:"contentType,omitempty"`
	// A JSON-stringified array of all Records associated with this Signal.
	AllRecords []map[string]interface{} `json:"allRecords"`
	// Whether the Signal is suppressed
	Suppressed *bool `json:"suppressed,omitempty"`
	RuleId *string `json:"ruleId,omitempty"`
	Tags []string `json:"tags"`
	Entity SignalEntity `json:"entity"`
	InvolvedEntities []SignalEntity `json:"involvedEntities"`
	Artifacts []GetInsightsResponseDataObjectsInnerSignalsInnerArtifactsInner `json:"artifacts,omitempty"`
}

type _Signal Signal

// NewSignal instantiates a new Signal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignal(id string, name string, summary string, stage string, created time.Time, timestamp time.Time, severity int32, recordCount int32, recordTypes []string, allRecords []map[string]interface{}, tags []string, entity SignalEntity, involvedEntities []SignalEntity) *Signal {
	this := Signal{}
	this.Id = id
	this.Name = name
	this.Summary = summary
	this.Stage = stage
	this.Created = created
	this.Timestamp = timestamp
	this.Severity = severity
	this.RecordCount = recordCount
	this.RecordTypes = recordTypes
	this.AllRecords = allRecords
	this.Tags = tags
	this.Entity = entity
	this.InvolvedEntities = involvedEntities
	return &this
}

// NewSignalWithDefaults instantiates a new Signal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalWithDefaults() *Signal {
	this := Signal{}
	return &this
}

// GetId returns the Id field value
func (o *Signal) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Signal) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Signal) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Signal) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Signal) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Signal) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Signal) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signal) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Signal) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Signal) SetDescription(v string) {
	o.Description = &v
}

// GetSummary returns the Summary field value
func (o *Signal) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *Signal) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *Signal) SetSummary(v string) {
	o.Summary = v
}

// GetStage returns the Stage field value
func (o *Signal) GetStage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stage
}

// GetStageOk returns a tuple with the Stage field value
// and a boolean to check if the value has been set.
func (o *Signal) GetStageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stage, true
}

// SetStage sets field value
func (o *Signal) SetStage(v string) {
	o.Stage = v
}

// GetCreated returns the Created field value
func (o *Signal) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Signal) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Signal) SetCreated(v time.Time) {
	o.Created = v
}

// GetTimestamp returns the Timestamp field value
func (o *Signal) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Signal) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Signal) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetSeverity returns the Severity field value
func (o *Signal) GetSeverity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *Signal) GetSeverityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *Signal) SetSeverity(v int32) {
	o.Severity = v
}

// GetRecordCount returns the RecordCount field value
func (o *Signal) GetRecordCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecordCount
}

// GetRecordCountOk returns a tuple with the RecordCount field value
// and a boolean to check if the value has been set.
func (o *Signal) GetRecordCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordCount, true
}

// SetRecordCount sets field value
func (o *Signal) SetRecordCount(v int32) {
	o.RecordCount = v
}

// GetRecordTypes returns the RecordTypes field value
func (o *Signal) GetRecordTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RecordTypes
}

// GetRecordTypesOk returns a tuple with the RecordTypes field value
// and a boolean to check if the value has been set.
func (o *Signal) GetRecordTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordTypes, true
}

// SetRecordTypes sets field value
func (o *Signal) SetRecordTypes(v []string) {
	o.RecordTypes = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *Signal) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signal) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *Signal) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *Signal) SetContentType(v string) {
	o.ContentType = &v
}

// GetAllRecords returns the AllRecords field value
func (o *Signal) GetAllRecords() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.AllRecords
}

// GetAllRecordsOk returns a tuple with the AllRecords field value
// and a boolean to check if the value has been set.
func (o *Signal) GetAllRecordsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllRecords, true
}

// SetAllRecords sets field value
func (o *Signal) SetAllRecords(v []map[string]interface{}) {
	o.AllRecords = v
}

// GetSuppressed returns the Suppressed field value if set, zero value otherwise.
func (o *Signal) GetSuppressed() bool {
	if o == nil || IsNil(o.Suppressed) {
		var ret bool
		return ret
	}
	return *o.Suppressed
}

// GetSuppressedOk returns a tuple with the Suppressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signal) GetSuppressedOk() (*bool, bool) {
	if o == nil || IsNil(o.Suppressed) {
		return nil, false
	}
	return o.Suppressed, true
}

// HasSuppressed returns a boolean if a field has been set.
func (o *Signal) HasSuppressed() bool {
	if o != nil && !IsNil(o.Suppressed) {
		return true
	}

	return false
}

// SetSuppressed gets a reference to the given bool and assigns it to the Suppressed field.
func (o *Signal) SetSuppressed(v bool) {
	o.Suppressed = &v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *Signal) GetRuleId() string {
	if o == nil || IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signal) GetRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *Signal) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *Signal) SetRuleId(v string) {
	o.RuleId = &v
}

// GetTags returns the Tags field value
func (o *Signal) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Signal) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *Signal) SetTags(v []string) {
	o.Tags = v
}

// GetEntity returns the Entity field value
func (o *Signal) GetEntity() SignalEntity {
	if o == nil {
		var ret SignalEntity
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *Signal) GetEntityOk() (*SignalEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *Signal) SetEntity(v SignalEntity) {
	o.Entity = v
}

// GetInvolvedEntities returns the InvolvedEntities field value
func (o *Signal) GetInvolvedEntities() []SignalEntity {
	if o == nil {
		var ret []SignalEntity
		return ret
	}

	return o.InvolvedEntities
}

// GetInvolvedEntitiesOk returns a tuple with the InvolvedEntities field value
// and a boolean to check if the value has been set.
func (o *Signal) GetInvolvedEntitiesOk() ([]SignalEntity, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvolvedEntities, true
}

// SetInvolvedEntities sets field value
func (o *Signal) SetInvolvedEntities(v []SignalEntity) {
	o.InvolvedEntities = v
}

// GetArtifacts returns the Artifacts field value if set, zero value otherwise.
func (o *Signal) GetArtifacts() []GetInsightsResponseDataObjectsInnerSignalsInnerArtifactsInner {
	if o == nil || IsNil(o.Artifacts) {
		var ret []GetInsightsResponseDataObjectsInnerSignalsInnerArtifactsInner
		return ret
	}
	return o.Artifacts
}

// GetArtifactsOk returns a tuple with the Artifacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Signal) GetArtifactsOk() ([]GetInsightsResponseDataObjectsInnerSignalsInnerArtifactsInner, bool) {
	if o == nil || IsNil(o.Artifacts) {
		return nil, false
	}
	return o.Artifacts, true
}

// HasArtifacts returns a boolean if a field has been set.
func (o *Signal) HasArtifacts() bool {
	if o != nil && !IsNil(o.Artifacts) {
		return true
	}

	return false
}

// SetArtifacts gets a reference to the given []GetInsightsResponseDataObjectsInnerSignalsInnerArtifactsInner and assigns it to the Artifacts field.
func (o *Signal) SetArtifacts(v []GetInsightsResponseDataObjectsInnerSignalsInnerArtifactsInner) {
	o.Artifacts = v
}

func (o Signal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Signal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["summary"] = o.Summary
	toSerialize["stage"] = o.Stage
	toSerialize["created"] = o.Created
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["severity"] = o.Severity
	toSerialize["recordCount"] = o.RecordCount
	toSerialize["recordTypes"] = o.RecordTypes
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	toSerialize["allRecords"] = o.AllRecords
	if !IsNil(o.Suppressed) {
		toSerialize["suppressed"] = o.Suppressed
	}
	if !IsNil(o.RuleId) {
		toSerialize["ruleId"] = o.RuleId
	}
	toSerialize["tags"] = o.Tags
	toSerialize["entity"] = o.Entity
	toSerialize["involvedEntities"] = o.InvolvedEntities
	if !IsNil(o.Artifacts) {
		toSerialize["artifacts"] = o.Artifacts
	}
	return toSerialize, nil
}

func (o *Signal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"summary",
		"stage",
		"created",
		"timestamp",
		"severity",
		"recordCount",
		"recordTypes",
		"allRecords",
		"tags",
		"entity",
		"involvedEntities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignal := _Signal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignal)

	if err != nil {
		return err
	}

	*o = Signal(varSignal)

	return err
}

type NullableSignal struct {
	value *Signal
	isSet bool
}

func (v NullableSignal) Get() *Signal {
	return v.value
}

func (v *NullableSignal) Set(val *Signal) {
	v.value = val
	v.isSet = true
}

func (v NullableSignal) IsSet() bool {
	return v.isSet
}

func (v *NullableSignal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignal(val *Signal) *NullableSignal {
	return &NullableSignal{value: val, isSet: true}
}

func (v NullableSignal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


