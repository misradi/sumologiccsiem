/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogMapping{}

// LogMapping struct for LogMapping
type LogMapping struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Source string `json:"source"`
	SkippedValues []string `json:"skippedValues"`
	Fields []CreateLogMappingRequestBodyFieldsFieldsInner `json:"fields"`
	Enabled bool `json:"enabled"`
	RelatesEntities bool `json:"relatesEntities"`
	UnstructuredFields *CreateLogMappingRequestBodyFieldsUnstructuredFields `json:"unstructuredFields,omitempty"`
	StructuredInputs []LogMappingStructuredInputsInner `json:"structuredInputs"`
	RecordType string `json:"recordType"`
	ProductGuid *string `json:"productGuid,omitempty"`
	Input map[string]interface{} `json:"input,omitempty"`
	Output map[string]interface{} `json:"output,omitempty"`
}

type _LogMapping LogMapping

// NewLogMapping instantiates a new LogMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogMapping(id string, name string, source string, skippedValues []string, fields []CreateLogMappingRequestBodyFieldsFieldsInner, enabled bool, relatesEntities bool, structuredInputs []LogMappingStructuredInputsInner, recordType string) *LogMapping {
	this := LogMapping{}
	this.Id = id
	this.Name = name
	this.Source = source
	this.SkippedValues = skippedValues
	this.Fields = fields
	this.Enabled = enabled
	this.RelatesEntities = relatesEntities
	this.StructuredInputs = structuredInputs
	this.RecordType = recordType
	return &this
}

// NewLogMappingWithDefaults instantiates a new LogMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogMappingWithDefaults() *LogMapping {
	this := LogMapping{}
	return &this
}

// GetId returns the Id field value
func (o *LogMapping) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogMapping) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogMapping) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *LogMapping) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LogMapping) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogMapping) SetName(v string) {
	o.Name = v
}

// GetSource returns the Source field value
func (o *LogMapping) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *LogMapping) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *LogMapping) SetSource(v string) {
	o.Source = v
}

// GetSkippedValues returns the SkippedValues field value
func (o *LogMapping) GetSkippedValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SkippedValues
}

// GetSkippedValuesOk returns a tuple with the SkippedValues field value
// and a boolean to check if the value has been set.
func (o *LogMapping) GetSkippedValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkippedValues, true
}

// SetSkippedValues sets field value
func (o *LogMapping) SetSkippedValues(v []string) {
	o.SkippedValues = v
}

// GetFields returns the Fields field value
func (o *LogMapping) GetFields() []CreateLogMappingRequestBodyFieldsFieldsInner {
	if o == nil {
		var ret []CreateLogMappingRequestBodyFieldsFieldsInner
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *LogMapping) GetFieldsOk() ([]CreateLogMappingRequestBodyFieldsFieldsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *LogMapping) SetFields(v []CreateLogMappingRequestBodyFieldsFieldsInner) {
	o.Fields = v
}

// GetEnabled returns the Enabled field value
func (o *LogMapping) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *LogMapping) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *LogMapping) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRelatesEntities returns the RelatesEntities field value
func (o *LogMapping) GetRelatesEntities() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RelatesEntities
}

// GetRelatesEntitiesOk returns a tuple with the RelatesEntities field value
// and a boolean to check if the value has been set.
func (o *LogMapping) GetRelatesEntitiesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatesEntities, true
}

// SetRelatesEntities sets field value
func (o *LogMapping) SetRelatesEntities(v bool) {
	o.RelatesEntities = v
}

// GetUnstructuredFields returns the UnstructuredFields field value if set, zero value otherwise.
func (o *LogMapping) GetUnstructuredFields() CreateLogMappingRequestBodyFieldsUnstructuredFields {
	if o == nil || IsNil(o.UnstructuredFields) {
		var ret CreateLogMappingRequestBodyFieldsUnstructuredFields
		return ret
	}
	return *o.UnstructuredFields
}

// GetUnstructuredFieldsOk returns a tuple with the UnstructuredFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogMapping) GetUnstructuredFieldsOk() (*CreateLogMappingRequestBodyFieldsUnstructuredFields, bool) {
	if o == nil || IsNil(o.UnstructuredFields) {
		return nil, false
	}
	return o.UnstructuredFields, true
}

// HasUnstructuredFields returns a boolean if a field has been set.
func (o *LogMapping) HasUnstructuredFields() bool {
	if o != nil && !IsNil(o.UnstructuredFields) {
		return true
	}

	return false
}

// SetUnstructuredFields gets a reference to the given CreateLogMappingRequestBodyFieldsUnstructuredFields and assigns it to the UnstructuredFields field.
func (o *LogMapping) SetUnstructuredFields(v CreateLogMappingRequestBodyFieldsUnstructuredFields) {
	o.UnstructuredFields = &v
}

// GetStructuredInputs returns the StructuredInputs field value
func (o *LogMapping) GetStructuredInputs() []LogMappingStructuredInputsInner {
	if o == nil {
		var ret []LogMappingStructuredInputsInner
		return ret
	}

	return o.StructuredInputs
}

// GetStructuredInputsOk returns a tuple with the StructuredInputs field value
// and a boolean to check if the value has been set.
func (o *LogMapping) GetStructuredInputsOk() ([]LogMappingStructuredInputsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.StructuredInputs, true
}

// SetStructuredInputs sets field value
func (o *LogMapping) SetStructuredInputs(v []LogMappingStructuredInputsInner) {
	o.StructuredInputs = v
}

// GetRecordType returns the RecordType field value
func (o *LogMapping) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *LogMapping) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *LogMapping) SetRecordType(v string) {
	o.RecordType = v
}

// GetProductGuid returns the ProductGuid field value if set, zero value otherwise.
func (o *LogMapping) GetProductGuid() string {
	if o == nil || IsNil(o.ProductGuid) {
		var ret string
		return ret
	}
	return *o.ProductGuid
}

// GetProductGuidOk returns a tuple with the ProductGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogMapping) GetProductGuidOk() (*string, bool) {
	if o == nil || IsNil(o.ProductGuid) {
		return nil, false
	}
	return o.ProductGuid, true
}

// HasProductGuid returns a boolean if a field has been set.
func (o *LogMapping) HasProductGuid() bool {
	if o != nil && !IsNil(o.ProductGuid) {
		return true
	}

	return false
}

// SetProductGuid gets a reference to the given string and assigns it to the ProductGuid field.
func (o *LogMapping) SetProductGuid(v string) {
	o.ProductGuid = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *LogMapping) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogMapping) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *LogMapping) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *LogMapping) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *LogMapping) GetOutput() map[string]interface{} {
	if o == nil || IsNil(o.Output) {
		var ret map[string]interface{}
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogMapping) GetOutputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Output) {
		return map[string]interface{}{}, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *LogMapping) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given map[string]interface{} and assigns it to the Output field.
func (o *LogMapping) SetOutput(v map[string]interface{}) {
	o.Output = v
}

func (o LogMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["source"] = o.Source
	toSerialize["skippedValues"] = o.SkippedValues
	toSerialize["fields"] = o.Fields
	toSerialize["enabled"] = o.Enabled
	toSerialize["relatesEntities"] = o.RelatesEntities
	if !IsNil(o.UnstructuredFields) {
		toSerialize["unstructuredFields"] = o.UnstructuredFields
	}
	toSerialize["structuredInputs"] = o.StructuredInputs
	toSerialize["recordType"] = o.RecordType
	if !IsNil(o.ProductGuid) {
		toSerialize["productGuid"] = o.ProductGuid
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	return toSerialize, nil
}

func (o *LogMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"source",
		"skippedValues",
		"fields",
		"enabled",
		"relatesEntities",
		"structuredInputs",
		"recordType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogMapping := _LogMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogMapping)

	if err != nil {
		return err
	}

	*o = LogMapping(varLogMapping)

	return err
}

type NullableLogMapping struct {
	value *LogMapping
	isSet bool
}

func (v NullableLogMapping) Get() *LogMapping {
	return v.value
}

func (v *NullableLogMapping) Set(val *LogMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableLogMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableLogMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogMapping(val *LogMapping) *NullableLogMapping {
	return &NullableLogMapping{value: val, isSet: true}
}

func (v NullableLogMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


