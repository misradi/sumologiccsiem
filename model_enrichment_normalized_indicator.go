/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologiccsiem

import (
	"encoding/json"
	"time"
)

// checks if the EnrichmentNormalizedIndicator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnrichmentNormalizedIndicator{}

// EnrichmentNormalizedIndicator struct for EnrichmentNormalizedIndicator
type EnrichmentNormalizedIndicator struct {
	Id *string `json:"id,omitempty"`
	Indicator *string `json:"indicator,omitempty"`
	Type *string `json:"type,omitempty"`
	Source *string `json:"source,omitempty"`
	Imported *time.Time `json:"imported,omitempty"`
	ValidFrom *time.Time `json:"validFrom,omitempty"`
	ValidUntil *time.Time `json:"validUntil,omitempty"`
	Confidence *int32 `json:"confidence,omitempty"`
	ThreatType *string `json:"threatType,omitempty"`
	Fields *string `json:"fields,omitempty"`
}

// NewEnrichmentNormalizedIndicator instantiates a new EnrichmentNormalizedIndicator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrichmentNormalizedIndicator() *EnrichmentNormalizedIndicator {
	this := EnrichmentNormalizedIndicator{}
	return &this
}

// NewEnrichmentNormalizedIndicatorWithDefaults instantiates a new EnrichmentNormalizedIndicator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrichmentNormalizedIndicatorWithDefaults() *EnrichmentNormalizedIndicator {
	this := EnrichmentNormalizedIndicator{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EnrichmentNormalizedIndicator) SetId(v string) {
	o.Id = &v
}

// GetIndicator returns the Indicator field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetIndicator() string {
	if o == nil || IsNil(o.Indicator) {
		var ret string
		return ret
	}
	return *o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.Indicator) {
		return nil, false
	}
	return o.Indicator, true
}

// HasIndicator returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasIndicator() bool {
	if o != nil && !IsNil(o.Indicator) {
		return true
	}

	return false
}

// SetIndicator gets a reference to the given string and assigns it to the Indicator field.
func (o *EnrichmentNormalizedIndicator) SetIndicator(v string) {
	o.Indicator = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EnrichmentNormalizedIndicator) SetType(v string) {
	o.Type = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *EnrichmentNormalizedIndicator) SetSource(v string) {
	o.Source = &v
}

// GetImported returns the Imported field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetImported() time.Time {
	if o == nil || IsNil(o.Imported) {
		var ret time.Time
		return ret
	}
	return *o.Imported
}

// GetImportedOk returns a tuple with the Imported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetImportedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Imported) {
		return nil, false
	}
	return o.Imported, true
}

// HasImported returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasImported() bool {
	if o != nil && !IsNil(o.Imported) {
		return true
	}

	return false
}

// SetImported gets a reference to the given time.Time and assigns it to the Imported field.
func (o *EnrichmentNormalizedIndicator) SetImported(v time.Time) {
	o.Imported = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetValidFrom() time.Time {
	if o == nil || IsNil(o.ValidFrom) {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetValidFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *EnrichmentNormalizedIndicator) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetValidUntil returns the ValidUntil field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetValidUntil() time.Time {
	if o == nil || IsNil(o.ValidUntil) {
		var ret time.Time
		return ret
	}
	return *o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetValidUntilOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidUntil) {
		return nil, false
	}
	return o.ValidUntil, true
}

// HasValidUntil returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasValidUntil() bool {
	if o != nil && !IsNil(o.ValidUntil) {
		return true
	}

	return false
}

// SetValidUntil gets a reference to the given time.Time and assigns it to the ValidUntil field.
func (o *EnrichmentNormalizedIndicator) SetValidUntil(v time.Time) {
	o.ValidUntil = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetConfidence() int32 {
	if o == nil || IsNil(o.Confidence) {
		var ret int32
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetConfidenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasConfidence() bool {
	if o != nil && !IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given int32 and assigns it to the Confidence field.
func (o *EnrichmentNormalizedIndicator) SetConfidence(v int32) {
	o.Confidence = &v
}

// GetThreatType returns the ThreatType field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetThreatType() string {
	if o == nil || IsNil(o.ThreatType) {
		var ret string
		return ret
	}
	return *o.ThreatType
}

// GetThreatTypeOk returns a tuple with the ThreatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetThreatTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ThreatType) {
		return nil, false
	}
	return o.ThreatType, true
}

// HasThreatType returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasThreatType() bool {
	if o != nil && !IsNil(o.ThreatType) {
		return true
	}

	return false
}

// SetThreatType gets a reference to the given string and assigns it to the ThreatType field.
func (o *EnrichmentNormalizedIndicator) SetThreatType(v string) {
	o.ThreatType = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *EnrichmentNormalizedIndicator) GetFields() string {
	if o == nil || IsNil(o.Fields) {
		var ret string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnrichmentNormalizedIndicator) GetFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *EnrichmentNormalizedIndicator) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given string and assigns it to the Fields field.
func (o *EnrichmentNormalizedIndicator) SetFields(v string) {
	o.Fields = &v
}

func (o EnrichmentNormalizedIndicator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnrichmentNormalizedIndicator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Indicator) {
		toSerialize["indicator"] = o.Indicator
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Imported) {
		toSerialize["imported"] = o.Imported
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["validFrom"] = o.ValidFrom
	}
	if !IsNil(o.ValidUntil) {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if !IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	if !IsNil(o.ThreatType) {
		toSerialize["threatType"] = o.ThreatType
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return toSerialize, nil
}

type NullableEnrichmentNormalizedIndicator struct {
	value *EnrichmentNormalizedIndicator
	isSet bool
}

func (v NullableEnrichmentNormalizedIndicator) Get() *EnrichmentNormalizedIndicator {
	return v.value
}

func (v *NullableEnrichmentNormalizedIndicator) Set(val *EnrichmentNormalizedIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichmentNormalizedIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichmentNormalizedIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichmentNormalizedIndicator(val *EnrichmentNormalizedIndicator) *NullableEnrichmentNormalizedIndicator {
	return &NullableEnrichmentNormalizedIndicator{value: val, isSet: true}
}

func (v NullableEnrichmentNormalizedIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichmentNormalizedIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


