/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateInsightSeverityRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateInsightSeverityRequestBody{}

// UpdateInsightSeverityRequestBody struct for UpdateInsightSeverityRequestBody
type UpdateInsightSeverityRequestBody struct {
	Severity *string `json:"severity,omitempty"`
}

// NewUpdateInsightSeverityRequestBody instantiates a new UpdateInsightSeverityRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInsightSeverityRequestBody() *UpdateInsightSeverityRequestBody {
	this := UpdateInsightSeverityRequestBody{}
	return &this
}

// NewUpdateInsightSeverityRequestBodyWithDefaults instantiates a new UpdateInsightSeverityRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInsightSeverityRequestBodyWithDefaults() *UpdateInsightSeverityRequestBody {
	this := UpdateInsightSeverityRequestBody{}
	return &this
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *UpdateInsightSeverityRequestBody) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInsightSeverityRequestBody) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *UpdateInsightSeverityRequestBody) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *UpdateInsightSeverityRequestBody) SetSeverity(v string) {
	o.Severity = &v
}

func (o UpdateInsightSeverityRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateInsightSeverityRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	return toSerialize, nil
}

type NullableUpdateInsightSeverityRequestBody struct {
	value *UpdateInsightSeverityRequestBody
	isSet bool
}

func (v NullableUpdateInsightSeverityRequestBody) Get() *UpdateInsightSeverityRequestBody {
	return v.value
}

func (v *NullableUpdateInsightSeverityRequestBody) Set(val *UpdateInsightSeverityRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInsightSeverityRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInsightSeverityRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInsightSeverityRequestBody(val *UpdateInsightSeverityRequestBody) *NullableUpdateInsightSeverityRequestBody {
	return &NullableUpdateInsightSeverityRequestBody{value: val, isSet: true}
}

func (v NullableUpdateInsightSeverityRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInsightSeverityRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


