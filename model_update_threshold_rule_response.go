/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateThresholdRuleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateThresholdRuleResponse{}

// UpdateThresholdRuleResponse struct for UpdateThresholdRuleResponse
type UpdateThresholdRuleResponse struct {
	Data ThresholdRule `json:"data"`
}

type _UpdateThresholdRuleResponse UpdateThresholdRuleResponse

// NewUpdateThresholdRuleResponse instantiates a new UpdateThresholdRuleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateThresholdRuleResponse(data ThresholdRule) *UpdateThresholdRuleResponse {
	this := UpdateThresholdRuleResponse{}
	this.Data = data
	return &this
}

// NewUpdateThresholdRuleResponseWithDefaults instantiates a new UpdateThresholdRuleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateThresholdRuleResponseWithDefaults() *UpdateThresholdRuleResponse {
	this := UpdateThresholdRuleResponse{}
	return &this
}

// GetData returns the Data field value
func (o *UpdateThresholdRuleResponse) GetData() ThresholdRule {
	if o == nil {
		var ret ThresholdRule
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *UpdateThresholdRuleResponse) GetDataOk() (*ThresholdRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *UpdateThresholdRuleResponse) SetData(v ThresholdRule) {
	o.Data = v
}

func (o UpdateThresholdRuleResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateThresholdRuleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *UpdateThresholdRuleResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateThresholdRuleResponse := _UpdateThresholdRuleResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateThresholdRuleResponse)

	if err != nil {
		return err
	}

	*o = UpdateThresholdRuleResponse(varUpdateThresholdRuleResponse)

	return err
}

type NullableUpdateThresholdRuleResponse struct {
	value *UpdateThresholdRuleResponse
	isSet bool
}

func (v NullableUpdateThresholdRuleResponse) Get() *UpdateThresholdRuleResponse {
	return v.value
}

func (v *NullableUpdateThresholdRuleResponse) Set(val *UpdateThresholdRuleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateThresholdRuleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateThresholdRuleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateThresholdRuleResponse(val *UpdateThresholdRuleResponse) *NullableUpdateThresholdRuleResponse {
	return &NullableUpdateThresholdRuleResponse{value: val, isSet: true}
}

func (v NullableUpdateThresholdRuleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateThresholdRuleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


