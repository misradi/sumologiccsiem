/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologiccsiem

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RuleTuningExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleTuningExpression{}

// RuleTuningExpression struct for RuleTuningExpression
type RuleTuningExpression struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	Expression string `json:"expression"`
	Enabled bool `json:"enabled"`
	IsGlobal bool `json:"isGlobal"`
	Exclude bool `json:"exclude"`
}

type _RuleTuningExpression RuleTuningExpression

// NewRuleTuningExpression instantiates a new RuleTuningExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleTuningExpression(id string, name string, description string, expression string, enabled bool, isGlobal bool, exclude bool) *RuleTuningExpression {
	this := RuleTuningExpression{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Expression = expression
	this.Enabled = enabled
	this.IsGlobal = isGlobal
	this.Exclude = exclude
	return &this
}

// NewRuleTuningExpressionWithDefaults instantiates a new RuleTuningExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleTuningExpressionWithDefaults() *RuleTuningExpression {
	this := RuleTuningExpression{}
	return &this
}

// GetId returns the Id field value
func (o *RuleTuningExpression) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RuleTuningExpression) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RuleTuningExpression) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RuleTuningExpression) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RuleTuningExpression) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RuleTuningExpression) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *RuleTuningExpression) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RuleTuningExpression) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RuleTuningExpression) SetDescription(v string) {
	o.Description = v
}

// GetExpression returns the Expression field value
func (o *RuleTuningExpression) GetExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value
// and a boolean to check if the value has been set.
func (o *RuleTuningExpression) GetExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expression, true
}

// SetExpression sets field value
func (o *RuleTuningExpression) SetExpression(v string) {
	o.Expression = v
}

// GetEnabled returns the Enabled field value
func (o *RuleTuningExpression) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *RuleTuningExpression) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *RuleTuningExpression) SetEnabled(v bool) {
	o.Enabled = v
}

// GetIsGlobal returns the IsGlobal field value
func (o *RuleTuningExpression) GetIsGlobal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGlobal
}

// GetIsGlobalOk returns a tuple with the IsGlobal field value
// and a boolean to check if the value has been set.
func (o *RuleTuningExpression) GetIsGlobalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsGlobal, true
}

// SetIsGlobal sets field value
func (o *RuleTuningExpression) SetIsGlobal(v bool) {
	o.IsGlobal = v
}

// GetExclude returns the Exclude field value
func (o *RuleTuningExpression) GetExclude() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value
// and a boolean to check if the value has been set.
func (o *RuleTuningExpression) GetExcludeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exclude, true
}

// SetExclude sets field value
func (o *RuleTuningExpression) SetExclude(v bool) {
	o.Exclude = v
}

func (o RuleTuningExpression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleTuningExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["expression"] = o.Expression
	toSerialize["enabled"] = o.Enabled
	toSerialize["isGlobal"] = o.IsGlobal
	toSerialize["exclude"] = o.Exclude
	return toSerialize, nil
}

func (o *RuleTuningExpression) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"expression",
		"enabled",
		"isGlobal",
		"exclude",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleTuningExpression := _RuleTuningExpression{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRuleTuningExpression)

	if err != nil {
		return err
	}

	*o = RuleTuningExpression(varRuleTuningExpression)

	return err
}

type NullableRuleTuningExpression struct {
	value *RuleTuningExpression
	isSet bool
}

func (v NullableRuleTuningExpression) Get() *RuleTuningExpression {
	return v.value
}

func (v *NullableRuleTuningExpression) Set(val *RuleTuningExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleTuningExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleTuningExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleTuningExpression(val *RuleTuningExpression) *NullableRuleTuningExpression {
	return &NullableRuleTuningExpression{value: val, isSet: true}
}

func (v NullableRuleTuningExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleTuningExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


