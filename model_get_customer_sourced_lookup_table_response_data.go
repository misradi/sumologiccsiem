/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologiccsiem

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetCustomerSourcedLookupTableResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCustomerSourcedLookupTableResponseData{}

// GetCustomerSourcedLookupTableResponseData The details for a single Customer Sourced Entity Lookup Table
type GetCustomerSourcedLookupTableResponseData struct {
	Id string `json:"id"`
	TableId string `json:"tableId"`
	ContentId string `json:"contentId"`
	Type string `json:"type"`
	KeyColumnName string `json:"keyColumnName"`
	ValueColumnName string `json:"valueColumnName"`
	TablePath *string `json:"tablePath,omitempty"`
	SourceCategory *string `json:"sourceCategory,omitempty"`
}

type _GetCustomerSourcedLookupTableResponseData GetCustomerSourcedLookupTableResponseData

// NewGetCustomerSourcedLookupTableResponseData instantiates a new GetCustomerSourcedLookupTableResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCustomerSourcedLookupTableResponseData(id string, tableId string, contentId string, type_ string, keyColumnName string, valueColumnName string) *GetCustomerSourcedLookupTableResponseData {
	this := GetCustomerSourcedLookupTableResponseData{}
	this.Id = id
	this.TableId = tableId
	this.ContentId = contentId
	this.Type = type_
	this.KeyColumnName = keyColumnName
	this.ValueColumnName = valueColumnName
	return &this
}

// NewGetCustomerSourcedLookupTableResponseDataWithDefaults instantiates a new GetCustomerSourcedLookupTableResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCustomerSourcedLookupTableResponseDataWithDefaults() *GetCustomerSourcedLookupTableResponseData {
	this := GetCustomerSourcedLookupTableResponseData{}
	return &this
}

// GetId returns the Id field value
func (o *GetCustomerSourcedLookupTableResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetCustomerSourcedLookupTableResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetCustomerSourcedLookupTableResponseData) SetId(v string) {
	o.Id = v
}

// GetTableId returns the TableId field value
func (o *GetCustomerSourcedLookupTableResponseData) GetTableId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value
// and a boolean to check if the value has been set.
func (o *GetCustomerSourcedLookupTableResponseData) GetTableIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableId, true
}

// SetTableId sets field value
func (o *GetCustomerSourcedLookupTableResponseData) SetTableId(v string) {
	o.TableId = v
}

// GetContentId returns the ContentId field value
func (o *GetCustomerSourcedLookupTableResponseData) GetContentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentId
}

// GetContentIdOk returns a tuple with the ContentId field value
// and a boolean to check if the value has been set.
func (o *GetCustomerSourcedLookupTableResponseData) GetContentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentId, true
}

// SetContentId sets field value
func (o *GetCustomerSourcedLookupTableResponseData) SetContentId(v string) {
	o.ContentId = v
}

// GetType returns the Type field value
func (o *GetCustomerSourcedLookupTableResponseData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GetCustomerSourcedLookupTableResponseData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GetCustomerSourcedLookupTableResponseData) SetType(v string) {
	o.Type = v
}

// GetKeyColumnName returns the KeyColumnName field value
func (o *GetCustomerSourcedLookupTableResponseData) GetKeyColumnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyColumnName
}

// GetKeyColumnNameOk returns a tuple with the KeyColumnName field value
// and a boolean to check if the value has been set.
func (o *GetCustomerSourcedLookupTableResponseData) GetKeyColumnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyColumnName, true
}

// SetKeyColumnName sets field value
func (o *GetCustomerSourcedLookupTableResponseData) SetKeyColumnName(v string) {
	o.KeyColumnName = v
}

// GetValueColumnName returns the ValueColumnName field value
func (o *GetCustomerSourcedLookupTableResponseData) GetValueColumnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueColumnName
}

// GetValueColumnNameOk returns a tuple with the ValueColumnName field value
// and a boolean to check if the value has been set.
func (o *GetCustomerSourcedLookupTableResponseData) GetValueColumnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueColumnName, true
}

// SetValueColumnName sets field value
func (o *GetCustomerSourcedLookupTableResponseData) SetValueColumnName(v string) {
	o.ValueColumnName = v
}

// GetTablePath returns the TablePath field value if set, zero value otherwise.
func (o *GetCustomerSourcedLookupTableResponseData) GetTablePath() string {
	if o == nil || IsNil(o.TablePath) {
		var ret string
		return ret
	}
	return *o.TablePath
}

// GetTablePathOk returns a tuple with the TablePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCustomerSourcedLookupTableResponseData) GetTablePathOk() (*string, bool) {
	if o == nil || IsNil(o.TablePath) {
		return nil, false
	}
	return o.TablePath, true
}

// HasTablePath returns a boolean if a field has been set.
func (o *GetCustomerSourcedLookupTableResponseData) HasTablePath() bool {
	if o != nil && !IsNil(o.TablePath) {
		return true
	}

	return false
}

// SetTablePath gets a reference to the given string and assigns it to the TablePath field.
func (o *GetCustomerSourcedLookupTableResponseData) SetTablePath(v string) {
	o.TablePath = &v
}

// GetSourceCategory returns the SourceCategory field value if set, zero value otherwise.
func (o *GetCustomerSourcedLookupTableResponseData) GetSourceCategory() string {
	if o == nil || IsNil(o.SourceCategory) {
		var ret string
		return ret
	}
	return *o.SourceCategory
}

// GetSourceCategoryOk returns a tuple with the SourceCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCustomerSourcedLookupTableResponseData) GetSourceCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.SourceCategory) {
		return nil, false
	}
	return o.SourceCategory, true
}

// HasSourceCategory returns a boolean if a field has been set.
func (o *GetCustomerSourcedLookupTableResponseData) HasSourceCategory() bool {
	if o != nil && !IsNil(o.SourceCategory) {
		return true
	}

	return false
}

// SetSourceCategory gets a reference to the given string and assigns it to the SourceCategory field.
func (o *GetCustomerSourcedLookupTableResponseData) SetSourceCategory(v string) {
	o.SourceCategory = &v
}

func (o GetCustomerSourcedLookupTableResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCustomerSourcedLookupTableResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["tableId"] = o.TableId
	toSerialize["contentId"] = o.ContentId
	toSerialize["type"] = o.Type
	toSerialize["keyColumnName"] = o.KeyColumnName
	toSerialize["valueColumnName"] = o.ValueColumnName
	if !IsNil(o.TablePath) {
		toSerialize["tablePath"] = o.TablePath
	}
	if !IsNil(o.SourceCategory) {
		toSerialize["sourceCategory"] = o.SourceCategory
	}
	return toSerialize, nil
}

func (o *GetCustomerSourcedLookupTableResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"tableId",
		"contentId",
		"type",
		"keyColumnName",
		"valueColumnName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetCustomerSourcedLookupTableResponseData := _GetCustomerSourcedLookupTableResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetCustomerSourcedLookupTableResponseData)

	if err != nil {
		return err
	}

	*o = GetCustomerSourcedLookupTableResponseData(varGetCustomerSourcedLookupTableResponseData)

	return err
}

type NullableGetCustomerSourcedLookupTableResponseData struct {
	value *GetCustomerSourcedLookupTableResponseData
	isSet bool
}

func (v NullableGetCustomerSourcedLookupTableResponseData) Get() *GetCustomerSourcedLookupTableResponseData {
	return v.value
}

func (v *NullableGetCustomerSourcedLookupTableResponseData) Set(val *GetCustomerSourcedLookupTableResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCustomerSourcedLookupTableResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCustomerSourcedLookupTableResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCustomerSourcedLookupTableResponseData(val *GetCustomerSourcedLookupTableResponseData) *NullableGetCustomerSourcedLookupTableResponseData {
	return &NullableGetCustomerSourcedLookupTableResponseData{value: val, isSet: true}
}

func (v NullableGetCustomerSourcedLookupTableResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCustomerSourcedLookupTableResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


