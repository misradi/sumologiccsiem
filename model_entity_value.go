/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EntityValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityValue{}

// EntityValue struct for EntityValue
type EntityValue struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	ConfigurationType string `json:"configurationType"`
	Tags []string `json:"tags,omitempty"`
	Criticality *string `json:"criticality,omitempty"`
	Suppressed *bool `json:"suppressed,omitempty"`
	Created time.Time `json:"created"`
	CreatedBy string `json:"createdBy"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty"`
	EntityNamespace *string `json:"entityNamespace,omitempty"`
	EntityType *string `json:"entityType,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	Suffix *string `json:"suffix,omitempty"`
	NetworkBlock *string `json:"networkBlock,omitempty"`
}

type _EntityValue EntityValue

// NewEntityValue instantiates a new EntityValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityValue(id string, name string, configurationType string, created time.Time, createdBy string) *EntityValue {
	this := EntityValue{}
	this.Id = id
	this.Name = name
	this.ConfigurationType = configurationType
	this.Created = created
	this.CreatedBy = createdBy
	return &this
}

// NewEntityValueWithDefaults instantiates a new EntityValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityValueWithDefaults() *EntityValue {
	this := EntityValue{}
	return &this
}

// GetId returns the Id field value
func (o *EntityValue) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EntityValue) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EntityValue) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *EntityValue) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EntityValue) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EntityValue) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EntityValue) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EntityValue) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EntityValue) SetDescription(v string) {
	o.Description = &v
}

// GetConfigurationType returns the ConfigurationType field value
func (o *EntityValue) GetConfigurationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigurationType
}

// GetConfigurationTypeOk returns a tuple with the ConfigurationType field value
// and a boolean to check if the value has been set.
func (o *EntityValue) GetConfigurationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigurationType, true
}

// SetConfigurationType sets field value
func (o *EntityValue) SetConfigurationType(v string) {
	o.ConfigurationType = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EntityValue) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EntityValue) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *EntityValue) SetTags(v []string) {
	o.Tags = v
}

// GetCriticality returns the Criticality field value if set, zero value otherwise.
func (o *EntityValue) GetCriticality() string {
	if o == nil || IsNil(o.Criticality) {
		var ret string
		return ret
	}
	return *o.Criticality
}

// GetCriticalityOk returns a tuple with the Criticality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetCriticalityOk() (*string, bool) {
	if o == nil || IsNil(o.Criticality) {
		return nil, false
	}
	return o.Criticality, true
}

// HasCriticality returns a boolean if a field has been set.
func (o *EntityValue) HasCriticality() bool {
	if o != nil && !IsNil(o.Criticality) {
		return true
	}

	return false
}

// SetCriticality gets a reference to the given string and assigns it to the Criticality field.
func (o *EntityValue) SetCriticality(v string) {
	o.Criticality = &v
}

// GetSuppressed returns the Suppressed field value if set, zero value otherwise.
func (o *EntityValue) GetSuppressed() bool {
	if o == nil || IsNil(o.Suppressed) {
		var ret bool
		return ret
	}
	return *o.Suppressed
}

// GetSuppressedOk returns a tuple with the Suppressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetSuppressedOk() (*bool, bool) {
	if o == nil || IsNil(o.Suppressed) {
		return nil, false
	}
	return o.Suppressed, true
}

// HasSuppressed returns a boolean if a field has been set.
func (o *EntityValue) HasSuppressed() bool {
	if o != nil && !IsNil(o.Suppressed) {
		return true
	}

	return false
}

// SetSuppressed gets a reference to the given bool and assigns it to the Suppressed field.
func (o *EntityValue) SetSuppressed(v bool) {
	o.Suppressed = &v
}

// GetCreated returns the Created field value
func (o *EntityValue) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *EntityValue) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *EntityValue) SetCreated(v time.Time) {
	o.Created = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *EntityValue) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *EntityValue) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *EntityValue) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *EntityValue) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *EntityValue) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *EntityValue) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastUpdatedBy returns the LastUpdatedBy field value if set, zero value otherwise.
func (o *EntityValue) GetLastUpdatedBy() string {
	if o == nil || IsNil(o.LastUpdatedBy) {
		var ret string
		return ret
	}
	return *o.LastUpdatedBy
}

// GetLastUpdatedByOk returns a tuple with the LastUpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetLastUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdatedBy) {
		return nil, false
	}
	return o.LastUpdatedBy, true
}

// HasLastUpdatedBy returns a boolean if a field has been set.
func (o *EntityValue) HasLastUpdatedBy() bool {
	if o != nil && !IsNil(o.LastUpdatedBy) {
		return true
	}

	return false
}

// SetLastUpdatedBy gets a reference to the given string and assigns it to the LastUpdatedBy field.
func (o *EntityValue) SetLastUpdatedBy(v string) {
	o.LastUpdatedBy = &v
}

// GetEntityNamespace returns the EntityNamespace field value if set, zero value otherwise.
func (o *EntityValue) GetEntityNamespace() string {
	if o == nil || IsNil(o.EntityNamespace) {
		var ret string
		return ret
	}
	return *o.EntityNamespace
}

// GetEntityNamespaceOk returns a tuple with the EntityNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetEntityNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.EntityNamespace) {
		return nil, false
	}
	return o.EntityNamespace, true
}

// HasEntityNamespace returns a boolean if a field has been set.
func (o *EntityValue) HasEntityNamespace() bool {
	if o != nil && !IsNil(o.EntityNamespace) {
		return true
	}

	return false
}

// SetEntityNamespace gets a reference to the given string and assigns it to the EntityNamespace field.
func (o *EntityValue) SetEntityNamespace(v string) {
	o.EntityNamespace = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *EntityValue) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *EntityValue) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *EntityValue) SetEntityType(v string) {
	o.EntityType = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *EntityValue) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *EntityValue) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *EntityValue) SetPrefix(v string) {
	o.Prefix = &v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise.
func (o *EntityValue) GetSuffix() string {
	if o == nil || IsNil(o.Suffix) {
		var ret string
		return ret
	}
	return *o.Suffix
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.Suffix) {
		return nil, false
	}
	return o.Suffix, true
}

// HasSuffix returns a boolean if a field has been set.
func (o *EntityValue) HasSuffix() bool {
	if o != nil && !IsNil(o.Suffix) {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given string and assigns it to the Suffix field.
func (o *EntityValue) SetSuffix(v string) {
	o.Suffix = &v
}

// GetNetworkBlock returns the NetworkBlock field value if set, zero value otherwise.
func (o *EntityValue) GetNetworkBlock() string {
	if o == nil || IsNil(o.NetworkBlock) {
		var ret string
		return ret
	}
	return *o.NetworkBlock
}

// GetNetworkBlockOk returns a tuple with the NetworkBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityValue) GetNetworkBlockOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkBlock) {
		return nil, false
	}
	return o.NetworkBlock, true
}

// HasNetworkBlock returns a boolean if a field has been set.
func (o *EntityValue) HasNetworkBlock() bool {
	if o != nil && !IsNil(o.NetworkBlock) {
		return true
	}

	return false
}

// SetNetworkBlock gets a reference to the given string and assigns it to the NetworkBlock field.
func (o *EntityValue) SetNetworkBlock(v string) {
	o.NetworkBlock = &v
}

func (o EntityValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["configurationType"] = o.ConfigurationType
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Criticality) {
		toSerialize["criticality"] = o.Criticality
	}
	if !IsNil(o.Suppressed) {
		toSerialize["suppressed"] = o.Suppressed
	}
	toSerialize["created"] = o.Created
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastUpdatedBy) {
		toSerialize["lastUpdatedBy"] = o.LastUpdatedBy
	}
	if !IsNil(o.EntityNamespace) {
		toSerialize["entityNamespace"] = o.EntityNamespace
	}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Suffix) {
		toSerialize["suffix"] = o.Suffix
	}
	if !IsNil(o.NetworkBlock) {
		toSerialize["networkBlock"] = o.NetworkBlock
	}
	return toSerialize, nil
}

func (o *EntityValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"configurationType",
		"created",
		"createdBy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntityValue := _EntityValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEntityValue)

	if err != nil {
		return err
	}

	*o = EntityValue(varEntityValue)

	return err
}

type NullableEntityValue struct {
	value *EntityValue
	isSet bool
}

func (v NullableEntityValue) Get() *EntityValue {
	return v.value
}

func (v *NullableEntityValue) Set(val *EntityValue) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityValue) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityValue(val *EntityValue) *NullableEntityValue {
	return &NullableEntityValue{value: val, isSet: true}
}

func (v NullableEntityValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


