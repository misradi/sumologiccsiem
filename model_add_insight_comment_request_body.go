/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddInsightCommentRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddInsightCommentRequestBody{}

// AddInsightCommentRequestBody struct for AddInsightCommentRequestBody
type AddInsightCommentRequestBody struct {
	Body string `json:"body"`
}

type _AddInsightCommentRequestBody AddInsightCommentRequestBody

// NewAddInsightCommentRequestBody instantiates a new AddInsightCommentRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddInsightCommentRequestBody(body string) *AddInsightCommentRequestBody {
	this := AddInsightCommentRequestBody{}
	this.Body = body
	return &this
}

// NewAddInsightCommentRequestBodyWithDefaults instantiates a new AddInsightCommentRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddInsightCommentRequestBodyWithDefaults() *AddInsightCommentRequestBody {
	this := AddInsightCommentRequestBody{}
	return &this
}

// GetBody returns the Body field value
func (o *AddInsightCommentRequestBody) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *AddInsightCommentRequestBody) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *AddInsightCommentRequestBody) SetBody(v string) {
	o.Body = v
}

func (o AddInsightCommentRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddInsightCommentRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["body"] = o.Body
	return toSerialize, nil
}

func (o *AddInsightCommentRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"body",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddInsightCommentRequestBody := _AddInsightCommentRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddInsightCommentRequestBody)

	if err != nil {
		return err
	}

	*o = AddInsightCommentRequestBody(varAddInsightCommentRequestBody)

	return err
}

type NullableAddInsightCommentRequestBody struct {
	value *AddInsightCommentRequestBody
	isSet bool
}

func (v NullableAddInsightCommentRequestBody) Get() *AddInsightCommentRequestBody {
	return v.value
}

func (v *NullableAddInsightCommentRequestBody) Set(val *AddInsightCommentRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableAddInsightCommentRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableAddInsightCommentRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddInsightCommentRequestBody(val *AddInsightCommentRequestBody) *NullableAddInsightCommentRequestBody {
	return &NullableAddInsightCommentRequestBody{value: val, isSet: true}
}

func (v NullableAddInsightCommentRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddInsightCommentRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


