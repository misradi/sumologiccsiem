/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogMappingVendorAndProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogMappingVendorAndProduct{}

// LogMappingVendorAndProduct struct for LogMappingVendorAndProduct
type LogMappingVendorAndProduct struct {
	Guid string `json:"guid"`
	Product string `json:"product"`
	Vendor string `json:"vendor"`
}

type _LogMappingVendorAndProduct LogMappingVendorAndProduct

// NewLogMappingVendorAndProduct instantiates a new LogMappingVendorAndProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogMappingVendorAndProduct(guid string, product string, vendor string) *LogMappingVendorAndProduct {
	this := LogMappingVendorAndProduct{}
	this.Guid = guid
	this.Product = product
	this.Vendor = vendor
	return &this
}

// NewLogMappingVendorAndProductWithDefaults instantiates a new LogMappingVendorAndProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogMappingVendorAndProductWithDefaults() *LogMappingVendorAndProduct {
	this := LogMappingVendorAndProduct{}
	return &this
}

// GetGuid returns the Guid field value
func (o *LogMappingVendorAndProduct) GetGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Guid
}

// GetGuidOk returns a tuple with the Guid field value
// and a boolean to check if the value has been set.
func (o *LogMappingVendorAndProduct) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Guid, true
}

// SetGuid sets field value
func (o *LogMappingVendorAndProduct) SetGuid(v string) {
	o.Guid = v
}

// GetProduct returns the Product field value
func (o *LogMappingVendorAndProduct) GetProduct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *LogMappingVendorAndProduct) GetProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *LogMappingVendorAndProduct) SetProduct(v string) {
	o.Product = v
}

// GetVendor returns the Vendor field value
func (o *LogMappingVendorAndProduct) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *LogMappingVendorAndProduct) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *LogMappingVendorAndProduct) SetVendor(v string) {
	o.Vendor = v
}

func (o LogMappingVendorAndProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogMappingVendorAndProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["guid"] = o.Guid
	toSerialize["product"] = o.Product
	toSerialize["vendor"] = o.Vendor
	return toSerialize, nil
}

func (o *LogMappingVendorAndProduct) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"guid",
		"product",
		"vendor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogMappingVendorAndProduct := _LogMappingVendorAndProduct{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogMappingVendorAndProduct)

	if err != nil {
		return err
	}

	*o = LogMappingVendorAndProduct(varLogMappingVendorAndProduct)

	return err
}

type NullableLogMappingVendorAndProduct struct {
	value *LogMappingVendorAndProduct
	isSet bool
}

func (v NullableLogMappingVendorAndProduct) Get() *LogMappingVendorAndProduct {
	return v.value
}

func (v *NullableLogMappingVendorAndProduct) Set(val *LogMappingVendorAndProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableLogMappingVendorAndProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableLogMappingVendorAndProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogMappingVendorAndProduct(val *LogMappingVendorAndProduct) *NullableLogMappingVendorAndProduct {
	return &NullableLogMappingVendorAndProduct{value: val, isSet: true}
}

func (v NullableLogMappingVendorAndProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogMappingVendorAndProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


