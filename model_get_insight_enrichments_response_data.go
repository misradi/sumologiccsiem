/*
Sumo Logic CSE API

 https://help.sumologic.com/APIs 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologiccsiem

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetInsightEnrichmentsResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetInsightEnrichmentsResponseData{}

// GetInsightEnrichmentsResponseData struct for GetInsightEnrichmentsResponseData
type GetInsightEnrichmentsResponseData struct {
	Enrichments []Enrichment `json:"enrichments"`
}

type _GetInsightEnrichmentsResponseData GetInsightEnrichmentsResponseData

// NewGetInsightEnrichmentsResponseData instantiates a new GetInsightEnrichmentsResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetInsightEnrichmentsResponseData(enrichments []Enrichment) *GetInsightEnrichmentsResponseData {
	this := GetInsightEnrichmentsResponseData{}
	this.Enrichments = enrichments
	return &this
}

// NewGetInsightEnrichmentsResponseDataWithDefaults instantiates a new GetInsightEnrichmentsResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetInsightEnrichmentsResponseDataWithDefaults() *GetInsightEnrichmentsResponseData {
	this := GetInsightEnrichmentsResponseData{}
	return &this
}

// GetEnrichments returns the Enrichments field value
func (o *GetInsightEnrichmentsResponseData) GetEnrichments() []Enrichment {
	if o == nil {
		var ret []Enrichment
		return ret
	}

	return o.Enrichments
}

// GetEnrichmentsOk returns a tuple with the Enrichments field value
// and a boolean to check if the value has been set.
func (o *GetInsightEnrichmentsResponseData) GetEnrichmentsOk() ([]Enrichment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enrichments, true
}

// SetEnrichments sets field value
func (o *GetInsightEnrichmentsResponseData) SetEnrichments(v []Enrichment) {
	o.Enrichments = v
}

func (o GetInsightEnrichmentsResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetInsightEnrichmentsResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enrichments"] = o.Enrichments
	return toSerialize, nil
}

func (o *GetInsightEnrichmentsResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enrichments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetInsightEnrichmentsResponseData := _GetInsightEnrichmentsResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetInsightEnrichmentsResponseData)

	if err != nil {
		return err
	}

	*o = GetInsightEnrichmentsResponseData(varGetInsightEnrichmentsResponseData)

	return err
}

type NullableGetInsightEnrichmentsResponseData struct {
	value *GetInsightEnrichmentsResponseData
	isSet bool
}

func (v NullableGetInsightEnrichmentsResponseData) Get() *GetInsightEnrichmentsResponseData {
	return v.value
}

func (v *NullableGetInsightEnrichmentsResponseData) Set(val *GetInsightEnrichmentsResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetInsightEnrichmentsResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetInsightEnrichmentsResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetInsightEnrichmentsResponseData(val *GetInsightEnrichmentsResponseData) *NullableGetInsightEnrichmentsResponseData {
	return &NullableGetInsightEnrichmentsResponseData{value: val, isSet: true}
}

func (v NullableGetInsightEnrichmentsResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetInsightEnrichmentsResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


